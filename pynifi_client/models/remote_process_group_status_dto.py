# coding: utf-8

"""
    NiFi Rest Api

    The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.  # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pynifi_client.models.node_remote_process_group_status_snapshot_dto import NodeRemoteProcessGroupStatusSnapshotDTO  # noqa: F401,E501
from pynifi_client.models.remote_process_group_status_snapshot_dto import RemoteProcessGroupStatusSnapshotDTO  # noqa: F401,E501


class RemoteProcessGroupStatusDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'id': 'str',
        'name': 'str',
        'target_uri': 'str',
        'transmission_status': 'str',
        'stats_last_refreshed': 'str',
        'aggregate_snapshot': 'RemoteProcessGroupStatusSnapshotDTO',
        'node_snapshots': 'list[NodeRemoteProcessGroupStatusSnapshotDTO]'
    }

    attribute_map = {
        'group_id': 'groupId',
        'id': 'id',
        'name': 'name',
        'target_uri': 'targetUri',
        'transmission_status': 'transmissionStatus',
        'stats_last_refreshed': 'statsLastRefreshed',
        'aggregate_snapshot': 'aggregateSnapshot',
        'node_snapshots': 'nodeSnapshots'
    }

    def __init__(self, group_id=None, id=None, name=None, target_uri=None, transmission_status=None, stats_last_refreshed=None, aggregate_snapshot=None, node_snapshots=None):  # noqa: E501
        """RemoteProcessGroupStatusDTO - a model defined in Swagger"""  # noqa: E501

        self._group_id = None
        self._id = None
        self._name = None
        self._target_uri = None
        self._transmission_status = None
        self._stats_last_refreshed = None
        self._aggregate_snapshot = None
        self._node_snapshots = None
        self.discriminator = None

        if group_id is not None:
            self.group_id = group_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if target_uri is not None:
            self.target_uri = target_uri
        if transmission_status is not None:
            self.transmission_status = transmission_status
        if stats_last_refreshed is not None:
            self.stats_last_refreshed = stats_last_refreshed
        if aggregate_snapshot is not None:
            self.aggregate_snapshot = aggregate_snapshot
        if node_snapshots is not None:
            self.node_snapshots = node_snapshots

    @property
    def group_id(self):
        """Gets the group_id of this RemoteProcessGroupStatusDTO.  # noqa: E501

        The unique ID of the process group that the Processor belongs to  # noqa: E501

        :return: The group_id of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this RemoteProcessGroupStatusDTO.

        The unique ID of the process group that the Processor belongs to  # noqa: E501

        :param group_id: The group_id of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this RemoteProcessGroupStatusDTO.  # noqa: E501

        The unique ID of the Processor  # noqa: E501

        :return: The id of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteProcessGroupStatusDTO.

        The unique ID of the Processor  # noqa: E501

        :param id: The id of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RemoteProcessGroupStatusDTO.  # noqa: E501

        The name of the remote process group.  # noqa: E501

        :return: The name of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteProcessGroupStatusDTO.

        The name of the remote process group.  # noqa: E501

        :param name: The name of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def target_uri(self):
        """Gets the target_uri of this RemoteProcessGroupStatusDTO.  # noqa: E501

        The URI of the target system.  # noqa: E501

        :return: The target_uri of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this RemoteProcessGroupStatusDTO.

        The URI of the target system.  # noqa: E501

        :param target_uri: The target_uri of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: str
        """

        self._target_uri = target_uri

    @property
    def transmission_status(self):
        """Gets the transmission_status of this RemoteProcessGroupStatusDTO.  # noqa: E501

        The transmission status of the remote process group.  # noqa: E501

        :return: The transmission_status of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: str
        """
        return self._transmission_status

    @transmission_status.setter
    def transmission_status(self, transmission_status):
        """Sets the transmission_status of this RemoteProcessGroupStatusDTO.

        The transmission status of the remote process group.  # noqa: E501

        :param transmission_status: The transmission_status of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: str
        """

        self._transmission_status = transmission_status

    @property
    def stats_last_refreshed(self):
        """Gets the stats_last_refreshed of this RemoteProcessGroupStatusDTO.  # noqa: E501

        The time the status for the process group was last refreshed.  # noqa: E501

        :return: The stats_last_refreshed of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: str
        """
        return self._stats_last_refreshed

    @stats_last_refreshed.setter
    def stats_last_refreshed(self, stats_last_refreshed):
        """Sets the stats_last_refreshed of this RemoteProcessGroupStatusDTO.

        The time the status for the process group was last refreshed.  # noqa: E501

        :param stats_last_refreshed: The stats_last_refreshed of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: str
        """

        self._stats_last_refreshed = stats_last_refreshed

    @property
    def aggregate_snapshot(self):
        """Gets the aggregate_snapshot of this RemoteProcessGroupStatusDTO.  # noqa: E501

        A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.  # noqa: E501

        :return: The aggregate_snapshot of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: RemoteProcessGroupStatusSnapshotDTO
        """
        return self._aggregate_snapshot

    @aggregate_snapshot.setter
    def aggregate_snapshot(self, aggregate_snapshot):
        """Sets the aggregate_snapshot of this RemoteProcessGroupStatusDTO.

        A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.  # noqa: E501

        :param aggregate_snapshot: The aggregate_snapshot of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: RemoteProcessGroupStatusSnapshotDTO
        """

        self._aggregate_snapshot = aggregate_snapshot

    @property
    def node_snapshots(self):
        """Gets the node_snapshots of this RemoteProcessGroupStatusDTO.  # noqa: E501

        A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.  # noqa: E501

        :return: The node_snapshots of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :rtype: list[NodeRemoteProcessGroupStatusSnapshotDTO]
        """
        return self._node_snapshots

    @node_snapshots.setter
    def node_snapshots(self, node_snapshots):
        """Sets the node_snapshots of this RemoteProcessGroupStatusDTO.

        A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.  # noqa: E501

        :param node_snapshots: The node_snapshots of this RemoteProcessGroupStatusDTO.  # noqa: E501
        :type: list[NodeRemoteProcessGroupStatusSnapshotDTO]
        """

        self._node_snapshots = node_snapshots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteProcessGroupStatusDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
