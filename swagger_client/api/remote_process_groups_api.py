# coding: utf-8

"""
    NiFi Rest Api

    The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.  # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RemoteProcessGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_remote_process_group(self, id, **kwargs):  # noqa: E501
        """Gets a remote process group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_remote_process_group(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :return: RemoteProcessGroupEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_remote_process_group_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_remote_process_group_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_remote_process_group_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a remote process group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_remote_process_group_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :return: RemoteProcessGroupEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_remote_process_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_remote_process_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/remote-process-groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteProcessGroupEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_remote_process_group(self, id, **kwargs):  # noqa: E501
        """Deletes a remote process group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_remote_process_group(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param str version: The revision is used to verify the client is working with the latest version of the flow.
        :param str client_id: If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
        :return: RemoteProcessGroupEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_remote_process_group_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_remote_process_group_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_remote_process_group_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes a remote process group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_remote_process_group_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param str version: The revision is used to verify the client is working with the latest version of the flow.
        :param str client_id: If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
        :return: RemoteProcessGroupEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'version', 'client_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_remote_process_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_remote_process_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/remote-process-groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteProcessGroupEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_remote_process_group(self, id, body, **kwargs):  # noqa: E501
        """Updates a remote process group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_remote_process_group(id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param RemoteProcessGroupEntity body: The remote process group. (required)
        :return: RemoteProcessGroupEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_remote_process_group_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_remote_process_group_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def update_remote_process_group_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Updates a remote process group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_remote_process_group_with_http_info(id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param RemoteProcessGroupEntity body: The remote process group. (required)
        :return: RemoteProcessGroupEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_remote_process_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_remote_process_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_remote_process_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/remote-process-groups/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteProcessGroupEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_remote_process_group_input_port(self, id, port_id, body, **kwargs):  # noqa: E501
        """Updates a remote port  # noqa: E501

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_remote_process_group_input_port(id, port_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param str port_id: The remote process group port id. (required)
        :param RemoteProcessGroupPortEntity body: The remote process group port. (required)
        :return: RemoteProcessGroupPortEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_remote_process_group_input_port_with_http_info(id, port_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_remote_process_group_input_port_with_http_info(id, port_id, body, **kwargs)  # noqa: E501
            return data

    def update_remote_process_group_input_port_with_http_info(self, id, port_id, body, **kwargs):  # noqa: E501
        """Updates a remote port  # noqa: E501

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_remote_process_group_input_port_with_http_info(id, port_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param str port_id: The remote process group port id. (required)
        :param RemoteProcessGroupPortEntity body: The remote process group port. (required)
        :return: RemoteProcessGroupPortEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_remote_process_group_input_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_remote_process_group_input_port`")  # noqa: E501
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params or
                params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `update_remote_process_group_input_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_remote_process_group_input_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'port_id' in params:
            path_params['port-id'] = params['port_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/remote-process-groups/{id}/input-ports/{port-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteProcessGroupPortEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_remote_process_group_output_port(self, id, port_id, body, **kwargs):  # noqa: E501
        """Updates a remote port  # noqa: E501

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_remote_process_group_output_port(id, port_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param str port_id: The remote process group port id. (required)
        :param RemoteProcessGroupPortEntity body: The remote process group port. (required)
        :return: RemoteProcessGroupPortEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_remote_process_group_output_port_with_http_info(id, port_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_remote_process_group_output_port_with_http_info(id, port_id, body, **kwargs)  # noqa: E501
            return data

    def update_remote_process_group_output_port_with_http_info(self, id, port_id, body, **kwargs):  # noqa: E501
        """Updates a remote port  # noqa: E501

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_remote_process_group_output_port_with_http_info(id, port_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The remote process group id. (required)
        :param str port_id: The remote process group port id. (required)
        :param RemoteProcessGroupPortEntity body: The remote process group port. (required)
        :return: RemoteProcessGroupPortEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_remote_process_group_output_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_remote_process_group_output_port`")  # noqa: E501
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params or
                params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `update_remote_process_group_output_port`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_remote_process_group_output_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'port_id' in params:
            path_params['port-id'] = params['port_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/remote-process-groups/{id}/output-ports/{port-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteProcessGroupPortEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
