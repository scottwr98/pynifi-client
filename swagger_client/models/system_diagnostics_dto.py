# coding: utf-8

"""
    NiFi Rest Api

    The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.  # noqa: E501

    OpenAPI spec version: 1.4.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.node_system_diagnostics_snapshot_dto import NodeSystemDiagnosticsSnapshotDTO  # noqa: F401,E501
from swagger_client.models.system_diagnostics_snapshot_dto import SystemDiagnosticsSnapshotDTO  # noqa: F401,E501


class SystemDiagnosticsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregate_snapshot': 'SystemDiagnosticsSnapshotDTO',
        'node_snapshots': 'list[NodeSystemDiagnosticsSnapshotDTO]'
    }

    attribute_map = {
        'aggregate_snapshot': 'aggregateSnapshot',
        'node_snapshots': 'nodeSnapshots'
    }

    def __init__(self, aggregate_snapshot=None, node_snapshots=None):  # noqa: E501
        """SystemDiagnosticsDTO - a model defined in Swagger"""  # noqa: E501

        self._aggregate_snapshot = None
        self._node_snapshots = None
        self.discriminator = None

        if aggregate_snapshot is not None:
            self.aggregate_snapshot = aggregate_snapshot
        if node_snapshots is not None:
            self.node_snapshots = node_snapshots

    @property
    def aggregate_snapshot(self):
        """Gets the aggregate_snapshot of this SystemDiagnosticsDTO.  # noqa: E501

        A systems diagnostic snapshot that represents the aggregate values of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.  # noqa: E501

        :return: The aggregate_snapshot of this SystemDiagnosticsDTO.  # noqa: E501
        :rtype: SystemDiagnosticsSnapshotDTO
        """
        return self._aggregate_snapshot

    @aggregate_snapshot.setter
    def aggregate_snapshot(self, aggregate_snapshot):
        """Sets the aggregate_snapshot of this SystemDiagnosticsDTO.

        A systems diagnostic snapshot that represents the aggregate values of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.  # noqa: E501

        :param aggregate_snapshot: The aggregate_snapshot of this SystemDiagnosticsDTO.  # noqa: E501
        :type: SystemDiagnosticsSnapshotDTO
        """

        self._aggregate_snapshot = aggregate_snapshot

    @property
    def node_snapshots(self):
        """Gets the node_snapshots of this SystemDiagnosticsDTO.  # noqa: E501

        A systems diagnostics snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.  # noqa: E501

        :return: The node_snapshots of this SystemDiagnosticsDTO.  # noqa: E501
        :rtype: list[NodeSystemDiagnosticsSnapshotDTO]
        """
        return self._node_snapshots

    @node_snapshots.setter
    def node_snapshots(self, node_snapshots):
        """Sets the node_snapshots of this SystemDiagnosticsDTO.

        A systems diagnostics snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.  # noqa: E501

        :param node_snapshots: The node_snapshots of this SystemDiagnosticsDTO.  # noqa: E501
        :type: list[NodeSystemDiagnosticsSnapshotDTO]
        """

        self._node_snapshots = node_snapshots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemDiagnosticsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
